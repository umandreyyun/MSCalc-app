import streamlit as st
import plotly.express as px
import pandas as pd
import openpyxl
import io
import os
from pathlib import Path
import matplotlib.pyplot as plt
from fpdf import FPDF
import base64
from datetime import datetime

import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –≥–∏–¥—Ä–æ—Ü–∏–ª–∏–Ω–¥—Ä–æ–≤",
    layout="wide",
    initial_sidebar_state="expanded"
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def load_default_data():
    return pd.DataFrame({
        "MaterialName": [
            "–¢—Ä—É–±–∞ E355 40x50",
            "–®—Ç–æ–∫ 42CrMo4 √ò20",
            "–ö—Ä—É–≥–ª—è–∫ 45 √ò40",
            "–ö—Ä—É–≥–ª—è–∫ 45 √ò50",
            "–ö—Ä—É–≥–ª—è–∫ 45 √ò60",
            "–ö—Ä—É–≥–ª—è–∫ 45 √ò70",
            "–ö—Ä—É–≥–ª—è–∫ 45 √ò80",
            "–ö—Ä—É–≥–ª—è–∫ 45 √ò90",
            "–ö—Ä—É–≥–ª—è–∫ 45 √ò100"
        ],
        "Cost": [5400.0, 9200.0, 2000.0, 2500.0, 3000.0, 3500.0, 4000.0, 4500.0, 5000.0],
        "Units": ["–º", "–º", "–º", "–º", "–º", "–º", "–º", "–º", "–º"],
        "LastUpdated": [datetime.now().date()] * 9
    })


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
if 'price_data' not in st.session_state:
    st.session_state.price_data = load_default_data()
if 'last_upload' not in st.session_state:
    st.session_state.last_upload = None
if 'repair_history' not in st.session_state:
    st.session_state.repair_history = pd.DataFrame(columns=[
        "–î–∞—Ç–∞", "–ù–∞—Ä—è–¥", "–ë—Ä–µ–Ω–¥", "–ú–æ–¥–µ–ª—å –ú–∞—à–∏–Ω—ã", "SN –ú–∞—à–∏–Ω—ã",
        "–ü—Ä–µ—Ñ–∏–∫—Å –ó–∞–∫–∞–∑—á–∏–∫", "–ù–∞–∑–≤ —Ü–∏–ª–∏–Ω–¥—Ä–∞", "SN —Ü–∏–ª–∏–Ω–¥—Ä–∞",
        "#–¢—Ä—É–±—ã", "#–®—Ç–æ–∫–∞", "#–ü–æ—Ä—à–Ω—è", "#–ì–æ–ª–æ–≤—ã",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (KZT)", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç (KZT)",
        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (KZT)", "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD)"
    ])


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏
def price_management():
    st.header("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ (Excel –∏–ª–∏ CSV)", type=["xlsx", "csv"])

    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.xlsx'):
                new_data = pd.read_excel(uploaded_file)
            else:
                try:
                    new_data = pd.read_csv(uploaded_file)
                except:
                    uploaded_file.seek(0)
                    new_data = pd.read_csv(uploaded_file, sep=';')

            required_columns = ["MaterialName", "Cost", "Units"]
            missing_cols = [col for col in required_columns if col not in new_data.columns]

            if not missing_cols:
                if "LastUpdated" not in new_data.columns:
                    new_data["LastUpdated"] = datetime.now().date()
                st.session_state.price_data = new_data
                st.session_state.last_upload = datetime.now()
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            else:
                st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

    with st.expander("‚úèÔ∏è –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö", expanded=True):
        if st.session_state.price_data.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            edited_data = st.data_editor(
                st.session_state.price_data,
                column_config={
                    "Cost": st.column_config.NumberColumn("–¶–µ–Ω–∞ (KZT)", min_value=0, format="%.0f"),
                    "LastUpdated": st.column_config.DateColumn("–û–±–Ω–æ–≤–ª–µ–Ω–æ", format="DD.MM.YYYY", disabled=True)
                },
                num_rows="dynamic"
            )
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                if not edited_data.equals(st.session_state.price_data):
                    mask = edited_data.ne(st.session_state.price_data).any(axis=1)
                    edited_data.loc[mask, "LastUpdated"] = datetime.now().date()
                    st.session_state.price_data = edited_data
                    st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∏–∞–º–µ—Ç—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
def extract_diameter(material_name):
    match = re.search(r'√ò(\d+)', material_name)
    return int(match.group(1)) if match else None


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
def main_calculator():
    st.title("üîß –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –≥–∏–¥—Ä–æ—Ü–∏–ª–∏–Ω–¥—Ä–æ–≤")

    with st.form("repair_form"):
        st.subheader("üìù –í–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–º–æ–Ω—Ç–µ")
        col1, col2 = st.columns(2)

        with col1:
            job_order = st.text_input("–ù–∞—Ä—è–¥")
            brand = st.text_input("–ë—Ä–µ–Ω–¥")
            model = st.text_input("–ú–æ–¥–µ–ª—å –ú–∞—à–∏–Ω—ã")
            sn_machine = st.text_input("SN –ú–∞—à–∏–Ω—ã")
            prefix = st.text_input("–ü—Ä–µ—Ñ–∏–∫—Å –ó–∞–∫–∞–∑—á–∏–∫")

        with col2:
            client = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–∞")
            sn_cylinder = st.text_input("SN —Ü–∏–ª–∏–Ω–¥—Ä–∞")
            pipe_num = st.text_input("# –¢—Ä—É–±—ã")
            rod_num = st.text_input("# –®—Ç–æ–∫–∞")
            piston_num = st.text_input("# –ü–æ—Ä—à–Ω—è")
            head_num = st.text_input("# –ì–æ–ª–æ–≤—ã")

        st.subheader("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
        col3, col4, col5 = st.columns(3)

        with col3:
            tube_options = st.session_state.price_data[
                st.session_state.price_data['MaterialName'].str.contains('–¢—Ä—É–±–∞|—Ç—Ä—É–±–∞', case=False)
            ]
            if not tube_options.empty:
                tube_selection = st.selectbox("–¢—Ä—É–±–∞", tube_options['MaterialName'])
                tube_data = tube_options[tube_options['MaterialName'] == tube_selection].iloc[0]
                tube_length = st.number_input("–î–ª–∏–Ω–∞ —Ç—Ä—É–±—ã (–º)", min_value=0.1, value=1.0, step=0.1)
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä—É–±–∞—Ö")

        with col4:
            rod_options = st.session_state.price_data[
                st.session_state.price_data['MaterialName'].str.contains('–®—Ç–æ–∫|—à—Ç–æ–∫', case=False)
            ]
            if not rod_options.empty:
                rod_selection = st.selectbox("–®—Ç–æ–∫", rod_options['MaterialName'])
                rod_data = rod_options[rod_options['MaterialName'] == rod_selection].iloc[0]
                rod_length = st.number_input("–î–ª–∏–Ω–∞ —à—Ç–æ–∫–∞ (–º)", min_value=0.1, value=1.0, step=0.1)
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —à—Ç–æ–∫–∞—Ö")

        with col5:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–∏–ø–∞ "–ö—Ä—É–≥–ª—è–∫" –¥–ª—è –ø–æ—Ä—à–Ω—è
            piston_options = st.session_state.price_data[
                st.session_state.price_data['MaterialName'].str.contains('–ö—Ä—É–≥–ª—è–∫|–∫—Ä—É–≥–ª—è–∫', case=False)
            ]

            if not piston_options.empty:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∏–∞–º–µ—Ç—Ä—É
                piston_options = piston_options.copy()
                piston_options['Diameter'] = piston_options['MaterialName'].apply(extract_diameter)
                piston_options = piston_options.sort_values('Diameter')

                piston_selection = st.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ—Ä—à–Ω—è (–∫—Ä—É–≥–ª—è–∫)", piston_options['MaterialName'])
                piston_data = piston_options[piston_options['MaterialName'] == piston_selection].iloc[0]
                piston_diameter = extract_diameter(piston_selection)

                st.markdown(f"**–î–∏–∞–º–µ—Ç—Ä –ø–æ—Ä—à–Ω—è:** {piston_diameter} –º–º")
                piston_length = st.number_input("–î–ª–∏–Ω–∞ –ø–æ—Ä—à–Ω—è (–º–º)", min_value=10, value=100, step=5)
                piston_quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—à–Ω–µ–π", min_value=1, value=1, step=1)
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¥–ª—è –ø–æ—Ä—à–Ω–µ–π (–∫—Ä—É–≥–ª—è–∫)")

        st.subheader("üõ† –¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã")
        col6, col7, col8 = st.columns(3)
        with col6:
            hours_inspection = st.number_input("–ß–∞—Å—ã –Ω–∞ –ø—Ä–∏–µ–º–∫—É/—Ä–∞–∑–±–æ—Ä–∫—É", min_value=0.5, value=2.0, step=0.5)
            hours_assembly = st.number_input("–ß–∞—Å—ã –Ω–∞ —Å–±–æ—Ä–∫—É/–æ—Ç–ø—Ä–∞–≤–∫—É", min_value=0.5, value=1.5, step=0.5)
        with col7:
            hours_liner = st.number_input("–ß–∞—Å—ã –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –≥–∏–ª—å–∑—ã", min_value=0.5, value=4.0, step=0.5)
            hours_rod = st.number_input("–ß–∞—Å—ã –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —à—Ç–æ–∫–∞", min_value=0.5, value=3.0, step=0.5)
        with col8:
            hours_piston = st.number_input("–ß–∞—Å—ã –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—à–Ω—è", min_value=0.5, value=3.5, step=0.5)

        st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        col9, col10 = st.columns(2)
        with col9:
            usd_rate = st.number_input("–ö—É—Ä—Å USD/KZT", min_value=1, value=450)
            vat = st.number_input("–ù–î–° (%)", min_value=0, max_value=20, value=12)
        with col10:
            workshop_rate = st.number_input("–°—Ç–∞–≤–∫–∞ —Ü–µ—Ö–∞ (KZT/—á–∞—Å)", min_value=1000, value=5000)
            margin = st.slider("–ú–∞—Ä–∂–∞ (%)", min_value=0, max_value=100, value=25)

        submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")

    if submitted:
        if 'tube_data' not in locals() or 'rod_data' not in locals() or 'piston_data' not in locals():
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö")
            return

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        tube_cost_kzt = tube_data['Cost'] * tube_length
        rod_cost_kzt = rod_data['Cost'] * rod_length
        piston_cost_kzt = piston_data['Cost'] * (piston_length / 1000) * piston_quantity  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –º–º –≤ –º–µ—Ç—Ä—ã
        materials_cost_kzt = tube_cost_kzt + rod_cost_kzt + piston_cost_kzt

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
        labor_hours = hours_inspection + hours_liner + hours_rod + hours_piston + hours_assembly
        labor_cost_kzt = labor_hours * workshop_rate

        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        subtotal_kzt = materials_cost_kzt + labor_cost_kzt
        price_with_margin = subtotal_kzt * (1 + margin / 100)
        final_price_kzt = price_with_margin * (1 + vat / 100)
        final_price_usd = final_price_kzt / usd_rate

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        new_record = pd.DataFrame([{
            "–î–∞—Ç–∞": datetime.now().strftime("%d.%m.%Y %H:%M"),
            "–ù–∞—Ä—è–¥": job_order,
            "–ë—Ä–µ–Ω–¥": brand,
            "–ú–æ–¥–µ–ª—å –ú–∞—à–∏–Ω—ã": model,
            "SN –ú–∞—à–∏–Ω—ã": sn_machine,
            "–ü—Ä–µ—Ñ–∏–∫—Å –ó–∞–∫–∞–∑—á–∏–∫": prefix,
            "–ù–∞–∑–≤ —Ü–∏–ª–∏–Ω–¥—Ä–∞": client,
            "SN —Ü–∏–ª–∏–Ω–¥—Ä–∞": sn_cylinder,
            "#–¢—Ä—É–±—ã": pipe_num,
            "#–®—Ç–æ–∫–∞": rod_num,
            "#–ü–æ—Ä—à–Ω—è": piston_num,
            "#–ì–æ–ª–æ–≤—ã": head_num,
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (KZT)": materials_cost_kzt,
            "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç (KZT)": labor_cost_kzt,
            "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (KZT)": final_price_kzt,
            "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD)": final_price_usd
        }])

        st.session_state.repair_history = pd.concat(
            [st.session_state.repair_history, new_record],
            ignore_index=True
        )

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞")

        st.subheader("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
        col11, col12, col13 = st.columns(3)
        with col11:
            st.markdown(f"""
            **{tube_selection}**  
            - –î–ª–∏–Ω–∞: {tube_length} –º  
            - –¶–µ–Ω–∞: {tube_data['Cost']} KZT/–º  
            - –°—Ç–æ–∏–º–æ—Å—Ç—å: {tube_cost_kzt:.0f} KZT
            """)
        with col12:
            st.markdown(f"""
            **{rod_selection}**  
            - –î–ª–∏–Ω–∞: {rod_length} –º  
            - –¶–µ–Ω–∞: {rod_data['Cost']} KZT/–º  
            - –°—Ç–æ–∏–º–æ—Å—Ç—å: {rod_cost_kzt:.0f} KZT
            """)
        with col13:
            st.markdown(f"""
            **{piston_selection}**  
            - –î–∏–∞–º–µ—Ç—Ä: {piston_diameter} –º–º  
            - –î–ª–∏–Ω–∞: {piston_length} –º–º  
            - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {piston_quantity} —à—Ç  
            - –¶–µ–Ω–∞: {piston_data['Cost']} KZT/–º  
            - –°—Ç–æ–∏–º–æ—Å—Ç—å: {piston_cost_kzt:.0f} KZT
            """)
        st.markdown(f"**–ò—Ç–æ–≥–æ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º:** {materials_cost_kzt:.0f} KZT")

        st.subheader("üõ† –†–∞–±–æ—Ç—ã")
        st.markdown(f"""
        - –í—Å–µ–≥–æ —á–∞—Å–æ–≤: {labor_hours:.1f} —á  
        - –°—Ç–∞–≤–∫–∞: {workshop_rate} KZT/—á  
        - –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç: {labor_cost_kzt:.0f} KZT
        """)

        st.subheader("üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç")
        st.markdown(f"""
        - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {materials_cost_kzt:.0f} KZT  
        - –†–∞–±–æ—Ç—ã: {labor_cost_kzt:.0f} KZT  
        - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {subtotal_kzt:.0f} KZT  
        - + –ú–∞—Ä–∂–∞ {margin}%: √ó{(1 + margin / 100):.2f}  
        - + –ù–î–° {vat}%: √ó{(1 + vat / 100):.2f}  
        - **–ò—Ç–æ–≥–æ:** {final_price_kzt:.0f} KZT = {final_price_usd:.2f} USD
        """)

        st.metric("–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (KZT)", f"{final_price_kzt:,.0f} ‚Ç∏")
        st.metric("–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD)", f"{final_price_usd:,.2f} $")

        # –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        export_data = pd.DataFrame({
            "–ü–æ–∑–∏—Ü–∏—è": ["–¢—Ä—É–±–∞", "–®—Ç–æ–∫", "–ü–æ—Ä—à–µ–Ω—å", "–†–∞–±–æ—Ç—ã", "–ò—Ç–æ–≥"],
            "–°—Ç–æ–∏–º–æ—Å—Ç—å (KZT)": [tube_cost_kzt, rod_cost_kzt, piston_cost_kzt, labor_cost_kzt, final_price_kzt],
            "–°—Ç–æ–∏–º–æ—Å—Ç—å (USD)": [
                tube_cost_kzt / usd_rate,
                rod_cost_kzt / usd_rate,
                piston_cost_kzt / usd_rate,
                labor_cost_kzt / usd_rate,
                final_price_usd
            ],
            "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": [
                tube_data["LastUpdated"],
                rod_data["LastUpdated"],
                piston_data["LastUpdated"],
                "-",
                "-"
            ]
        })

        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—Å—á—ë—Ç (CSV)",
            data=export_data.to_csv(index=False).encode('utf-8-sig'),
            file_name=f"repair_{job_order if job_order else datetime.now().strftime('%Y%m%d_%H%M')}.csv",
            mime="text/csv"
        )

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    st.header("üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤")
    if not st.session_state.repair_history.empty:
        st.dataframe(
            st.session_state.repair_history,
            column_config={
                "–î–∞—Ç–∞": st.column_config.DatetimeColumn(format="DD.MM.YYYY HH:mm"),
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (KZT)": st.column_config.NumberColumn(format="%.0f ‚Ç∏"),
                "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç (KZT)": st.column_config.NumberColumn(format="%.0f ‚Ç∏"),
                "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (KZT)": st.column_config.NumberColumn(format="%.0f ‚Ç∏"),
                "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD)": st.column_config.NumberColumn(format="%.2f $")
            },
            use_container_width=True,
            hide_index=True
        )

        # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é (CSV)",
            data=st.session_state.repair_history.to_csv(index=False).encode('utf-8-sig'),
            file_name="repair_history.csv",
            mime="text/csv"
        )
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞")


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    price_management()
    main_calculator()
